trigger:
  - main

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

steps:
- task: DotNetCoreCLI@2
  displayName: 'Install Playwright CLI'
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'install --global Microsoft.Playwright.CLI'

- task: PowerShell@2
  displayName: 'Install Playwright Browsers'
  inputs:
    targetType: 'inline'
    script: |
      dotnet build
      playwright install

- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet packages'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Install ReportGenerator'
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'install --global dotnet-reportgenerator-globaltool'

- task: DotNetCoreCLI@2
  displayName: 'Run Tests'
  inputs:
    command: 'test'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" --logger "trx;LogFileName=TestResults.trx" --logger "html;LogFileName=TestResults.html"'
    publishTestResults: true

- task: reportgenerator@4
  displayName: 'Generate Coverage Report'
  inputs:
    reports: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
    targetdir: '$(Build.SourcesDirectory)/CoverageReport'
    reporttypes: 'HtmlInline_AzurePipelines;Cobertura'

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: 'NUnit'
    testResultsFiles: '**/TestResults/*.xml'
    mergeTestResults: true
    failTaskOnFailedTests: true

- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CoverageReport'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Test Reports'
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/CoverageReport'
    ArtifactName: 'coverage-report'
    publishLocation: 'Container'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Screenshots'
  inputs:
    PathtoPublish: 'screenshots'
    ArtifactName: 'screenshots'
    publishLocation: 'Container'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Videos'
  inputs:
    PathtoPublish: 'videos'
    ArtifactName: 'videos'
    publishLocation: 'Container'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Logs'
  inputs:
    PathtoPublish: 'logs'
    ArtifactName: 'logs'
    publishLocation: 'Container'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Test Results'
  inputs:
    PathtoPublish: 'TestResults'
    ArtifactName: 'test-results'
    publishLocation: 'Container' 